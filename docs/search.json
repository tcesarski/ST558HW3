[
  {
    "objectID": "Tidyverse & Databases.html",
    "href": "Tidyverse & Databases.html",
    "title": "Tidyverse & Database HW",
    "section": "",
    "text": "1. If your working directory is myfolder/homework what relative path would you specify to get the file located at myfolder/MyData.csv \n\nI would use “../MyData.csv” The ../ moves up one level of the folders back to myfolder and then we are getting the MyData.csv dataset.\n\n2. What are the major benefits of using R projects? \n\nR projects allow us to have a folder that that contains the documents for the task in one convenient location. We can then use git & github to utilize version control, collaborate with others, and use local file paths. R projects allow Git and RStudio to work together!\n\n3. What is git and what is github? \n\nGit is a version control software. It allows you to take snapshots of the folders at different points in time. Github is an online hosting service for Git-based projects that allows us to easily collaborate with others.\n\n4. What are the two main differences between a tibble and a dataframe?\n\nTibbles print nicer and display the number of observations, columns, etc. They also do not simplify and will return as a tibble, rather than dataframes that could simplify to a vector when subsetting a single column.\n\n5. Rewrite the following nested function call using baseR’s chaining operator.  Note: I didn’t use a block quote on this section because I wanted to use a code chunk.\n\n#Original code\nlibrary(tidyverse)\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n#Code with chaining\nas_tibble(iris) |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n6. What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis? \n\nLong format is where each row has one observation and each column has a variable.Wide format is where more than one observation may be in a given row. We generally prefer long format for statistical analysis."
  },
  {
    "objectID": "Tidyverse & Databases.html#glass-data",
    "href": "Tidyverse & Databases.html#glass-data",
    "title": "Tidyverse & Database HW",
    "section": "Glass Data",
    "text": "Glass Data\nI first read in the glass dataset using read_csv because the delimiter is a comma. I then set the column names as given by the variables and printed out the tibble by calling the object name.\n\nlibrary(tidyverse)\nmy_glass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", \n      col_names = c(\"ID\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_Glass\"))\nmy_glass_data\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\nThis code is overwriting the Type_of_Glass variable with the actual names by going through ifelse. First it is seeing if Type_of_Glass is 1, then it is assigning it to building_windows_float_processed. If it is not then it is checking if the Type_of_Glass is 2. If it is then it is assigning it to building_windows_non_float_processed and so forth until it gets to all of the possibilities. If it is not 1-7 then it returns error because all of them are 1-7. After that I filtered to only get obserations where Fe is less than 2 and the Type_of_Glass is tableware or headlamp.\n\nmy_glass_data |&gt;\n  mutate(Type_of_Glass = ifelse(Type_of_Glass == 1, \"building_windows_float_processed\", \n        ifelse(Type_of_Glass == 2, \"building_windows_non_float_processed\",\n            ifelse(Type_of_Glass == 3, \"vehicle_windows_float_processed\",\n              ifelse(Type_of_Glass == 4, \"vehicle_windows_non_float_processed\",\n                ifelse(Type_of_Glass == 5, \"containers\",\n                  ifelse(Type_of_Glass == 6, \"tableware\",\n                    ifelse(Type_of_Glass == 7, \"headlamps\",\n                           \"Error\")\n        )\n        )\n        )\n        )\n        )\n        )\n        ) |&gt;\n  filter(Fe &lt; 0.2 & Type_of_Glass %in% c(\"tableware\", \"headlamps\"))\n\n# A tibble: 38 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows"
  },
  {
    "objectID": "Tidyverse & Databases.html#yeast-data",
    "href": "Tidyverse & Databases.html#yeast-data",
    "title": "Tidyverse & Database HW",
    "section": "Yeast Data",
    "text": "Yeast Data\nI read in the Yeast Data file. This dataset is a space-delimited file where two spaces are separating each. I opted to use the generic read_delim and then specify the delimiter as two spaces. I also added the column names as given in the table by using col_names().\n\nmy_yeast_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n           delim = \"  \",\n         col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\"))\nmy_yeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nI then used chaining to first select the columns between mcg and vac and then the class variable. This omits the seq_name column and the nuc columns. Then I grouped by class and added the means and medians at each class grouping using the across function. Since all the columns left were numeric I used is.numeric as was used in the notes and made the names be the mean_columnname and median_columnname.\n\nmy_yeast_data |&gt;\n  select(mcg:vac, class) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), mean, .names = \"mean_{.col}\")) |&gt;\n  mutate(across(where(is.numeric), median, .names=\"median_{.col}\"))\n\n# A tibble: 1,484 × 29\n# Groups:   class [44]\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg mean_gvh mean_alm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521    0.531    0.519\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521    0.531    0.519\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521    0.531    0.519\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.453    0.458    0.529\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521    0.531    0.519\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.480    0.469    0.536\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521    0.531    0.519\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.453    0.458    0.529\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521    0.531    0.519\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.480    0.469    0.536\n# ℹ 1,474 more rows\n# ℹ 18 more variables: mean_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, mean_pox &lt;dbl&gt;,\n#   mean_vac &lt;dbl&gt;, median_mcg &lt;dbl&gt;, median_gvh &lt;dbl&gt;, median_alm &lt;dbl&gt;,\n#   median_mit &lt;dbl&gt;, median_erl &lt;dbl&gt;, median_pox &lt;dbl&gt;, median_vac &lt;dbl&gt;,\n#   median_mean_mcg &lt;dbl&gt;, median_mean_gvh &lt;dbl&gt;, median_mean_alm &lt;dbl&gt;,\n#   median_mean_mit &lt;dbl&gt;, median_mean_erl &lt;dbl&gt;, median_mean_pox &lt;dbl&gt;,\n#   median_mean_vac &lt;dbl&gt;"
  }
]